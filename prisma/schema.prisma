// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  user
}

model User {
  id            String    @id @default(uuid())
  name          String?
  username      String?   @unique
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  imageUrl      String?   @map("image_url")
  imagePublicID String?   @map("image_public_id")
  password      String

  roles    Role[]  @default([user])
  isActive Boolean @default(false) @map("is_active")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Team {
  id            String   @id @default(uuid())
  name          String
  permalink     String   @unique
  headquarters  String
  imageUrl      String?  @map("image_url")
  imagePublicID String?  @map("image_public_id")
  division      String
  group         String
  tournament    String
  country       String
  city          String
  state         String
  coach         String
  emails        String[] @default([])
  address       String?
  active        Boolean  @default(false)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("teams")
}

model Tournament {
  id            String   @id @default(uuid())
  name          String
  permalink     String   @unique
  imageUrl      String?  @map("image_url")
  imagePublicID String?  @map("image_public_id")
  description   String
  country       String
  state         String
  city          String
  season        String
  startDate     DateTime @map("start_date")
  endDate       DateTime @map("end_date")
  active        Boolean  @default(false)

  // Relations
  matches Match[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("tournaments")
}

model Coach {
  id            String  @id @default(uuid())
  name          String
  email         String  @unique
  phone         String?
  age           Int?
  nationality   String?
  imageUrl      String?
  imagePublicID String? @map("image_public_id")
  description   String?
  active        Boolean @default(false)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("coaches")
}

model Player {
  id            String    @id @default(uuid())
  name          String    @unique
  email         String    @unique
  phone         String?
  birthday      DateTime?
  nationality   String?
  imageUrl      String?   @map("image_url")
  imagePublicID String?   @map("image_public_id")
  active        Boolean   @default(false)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("players")
}

enum Status {
  scheduled
  inProgress
  completed
  postPosed
  canceled
}

model Match {
  id           String   @id @default(uuid())
  local        String
  visitor      String
  localScore   Int?     @default(0) @map("local_score")
  visitorScore Int?     @default(0) @map("visitor_score")
  place        String
  matchDate    DateTime @map("match_date")
  week         Int
  referee      String

  status Status @default(scheduled)

  // Relations
  tournamentId String     @map("tournament_id")
  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("matches")
}
